# -*- coding: utf-8 -*-
"""Simple ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FHbzGcC2NHkCU841fn2K7eTOG7t2uGNC
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import matplotlib.pyplot as plt

# Load data
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
data = pd.read_csv(url, sep=';')
X = data.drop('quality', axis=1).values
Y = data['quality'].values

# Encode labels into one-hot vectors
label_encoder = LabelEncoder()
Y_encoded = label_encoder.fit_transform(Y)
Y_one_hot = np.eye(np.max(Y_encoded) + 1)[Y_encoded]

# Normalize data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y_one_hot, test_size=0.2, random_state=42)

# Network architecture parameters
input_size = X_train.shape[1]
output_size = Y_train.shape[1]  # Number of classes

def init_params():
    W1 = np.random.randn(10, input_size) * 0.01
    b1 = np.zeros((10, 1))
    W2 = np.random.randn(output_size, 10) * 0.01
    b2 = np.zeros((output_size, 1))
    return W1, b1, W2, b2

def softmax(Z):
    expZ = np.exp(Z - np.max(Z))
    return expZ / expZ.sum(axis=0, keepdims=True)

def forward_prop(W1, b1, W2, b2, X):
    Z1 = np.dot(W1, X.T) + b1
    A1 = np.tanh(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = softmax(Z2)
    return Z1, A1, Z2, A2

def backward_prop(Z1, A1, Z2, A2, W2, X, Y):
    m = Y.shape[1]
    dZ2 = A2 - Y.T
    dW2 = np.dot(dZ2, A1.T) / m
    db2 = np.sum(dZ2, axis=1, keepdims=True) / m
    dZ1 = np.dot(W2.T, dZ2) * (1 - np.power(A1, 2))
    dW1 = np.dot(dZ1, X) / m
    db1 = np.sum(dZ1, axis=1, keepdims=True) / m
    return dW1, db1, dW2, db2

def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):
    W1 -= alpha * dW1
    b1 -= alpha * db1
    W2 -= alpha * dW2
    b2 -= alpha * db2
    return W1, b1, W2, b2

def model(X, Y, alpha, iterations):
    W1, b1, W2, b2 = init_params()
    for i in range(iterations):
        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)
        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W2, X, Y)
        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)
        if i % 100 == 0:
            cost = -np.sum(Y * np.log(A2.T + 1e-8)) / m
            print(f"Iteration {i}, Cost: {cost}")
    return W1, b1, W2, b2

# Train the model
W1, b1, W2, b2 = model(X_train, Y_train, alpha=0.01, iterations=2000)

# Prediction function
def make_predictions(X, W1, b1, W2, b2):
    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)
    return np.argmax(A2, axis=0)

# Test predictions
predictions = make_predictions(X_test, W1, b1, W2, b2)
test_labels = np.argmax(Y_test, axis=1)
accuracy = np.mean(predictions == test_labels)
print(f"Test Accuracy: {accuracy * 100:.2f}%")